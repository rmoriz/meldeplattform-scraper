name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: meldeplattform-scraper

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Multi-platform RSS scraper with explicit architecture targeting
      timeout-minutes: 60

    - name: Test AMD64 image
      if: github.event_name == 'pull_request'
      run: |
        echo "Testing AMD64 image..."
        docker run --rm --platform linux/amd64 ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} --help
        echo "AMD64 architecture verification:"
        docker run --rm --platform linux/amd64 --entrypoint="" ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} sh -c "uname -m"

    - name: Test ARM64 image  
      if: github.event_name == 'pull_request'
      run: |
        echo "Testing ARM64 image..."
        docker run --rm --platform linux/arm64 ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} --help
        echo "ARM64 architecture verification:"
        docker run --rm --platform linux/arm64 --entrypoint="" ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} sh -c "uname -m"

    - name: Test functional scraping (AMD64)
      if: github.event_name == 'pull_request'
      run: |
        echo "Testing functional scraping on AMD64..."
        timeout 30s docker run --rm --platform linux/amd64 ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} --output /tmp/test.json || true
        echo "Scraping test completed"

  smoke-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

    - name: Smoke test ${{ matrix.platform }}
      run: |
        echo "Running smoke test for ${{ matrix.platform }}..."
        docker run --rm --platform ${{ matrix.platform }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} --help
        echo "Architecture verification:"
        docker run --rm --platform ${{ matrix.platform }} --entrypoint="" ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} sh -c "uname -m"
        echo "Quick functional test:"
        timeout 15s docker run --rm --platform ${{ matrix.platform }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} || true